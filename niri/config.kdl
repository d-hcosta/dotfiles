spawn-at-startup "swaybg" "-i" "/home/vrag/Pictures/Wallpapers/5.jpg" "-m" "fill" "-c" "#000000"
spawn-at-startup "sh" "-c" "sleep 1 && xwayland-satellite"
spawn-at-startup "dunst"

screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"
prefer-no-csd

overview {
    zoom 0.7
    backdrop-color "#0f0f0f"

    workspace-shadow {
        off
        softness 40
        spread 10
        offset x=0 y=10
        color "#00000050"
    }
}

hotkey-overlay {
    skip-at-startup
}

input {
    keyboard {
        xkb {
            layout "br"
        }

        numlock
    }

   touchpad {
        // off
        tap
        natural-scroll
        accel-speed 0.9
        accel-profile "flat"
    }
}

cursor {
    xcursor-theme "McMojave-cursors"
    xcursor-size 22
    hide-when-typing
    hide-after-inactive-ms 2000
}

layout {
    gaps 12
    background-color "transparent"
    always-center-single-column
    center-focused-column "never"

    preset-column-widths {
        proportion 0.60
        proportion 0.5
        proportion 0.66667
    }

     default-column-width { proportion 0.5; }

    preset-window-heights {
        proportion 0.2
        proportion 0.4
        proportion 0.5
        proportion 0.6
        proportion 0.8
    }

   focus-ring {
        width 0.5
        active-color "#000000"
        inactive-color "#000000"
        // active-gradient from="#404040" to="#404040" angle=45
        // inactive-gradient from="#2e2d2d" to="#2e2d2d" angle=45 relative-to="workspace-view"
    }

   border {
        width 0.1
        active-color "#303030"
        inactive-color "#404040"

        // Color of the border around windows that request your attention.
        urgent-color "#9b0000"

        // active-gradient from="#404040" to="#101010" angle=45 relative-to="workspace-view"
        inactive-gradient from="#303030" to="#101010" angle=45 relative-to="workspace-view"
    }

   shadow {
        draw-behind-window true
        softness 40
        spread 10
        offset x=0 y=0
        color "#0007"
    }
    
    struts {
        left 64
        right 64
    }
}

animations {
    // slowdown 1.0
    off    

    overview-open-close {
        spring damping-ratio=2.0 stiffness=4000 epsilon=0.0001
    }
    
    workspace-switch {
        spring damping-ratio=1.0 stiffness=2000 epsilon=0.0001
    }

    horizontal-view-movement {
        spring damping-ratio=2.0 stiffness=4000 epsilon=0.0001
    }

    // i didnt make the shaders
    // https://gitlab.com/sharkler/sharkler-dots/-/blob/main/.config/niri/config.kdl

    window-open {
        duration-ms 150
        curve "linear"
        custom-shader r"

        vec4 expanding_circle(vec3 coords_geo, vec3 size_geo) {
        vec3 coords_tex = niri_geo_to_tex * coords_geo;
        vec4 color = texture2D(niri_tex, coords_tex.st);
        vec2 coords = (coords_geo.xy - vec2(0.5, 0.5)) * size_geo.xy * 2.0;
        coords = coords / length(size_geo.xy);
        float p = niri_clamped_progress;
        if (p * p <= dot(coords, coords))
        color = vec4(0.0);

        return color;
        }

        vec4 open_color(vec3 coords_geo, vec3 size_geo) {
        return expanding_circle(coords_geo, size_geo);
        }
        "
    }



    window-close {
        duration-ms 250
        curve "linear"
        custom-shader r"
            vec4 fall_and_rotate(vec3 coords_geo, vec3 size_geo) {
            float progress = niri_clamped_progress * niri_clamped_progress;
            vec2 coords = (coords_geo.xy - vec2(0.5, 1.0)) * size_geo.xy;
            coords.y -= progress * 1440.0;
            float random = (niri_random_seed - 0.5) / 2.0;
            random = sign(random) - random;
            float max_angle = 0.5 * random;
            float angle = progress * max_angle;
            mat2 rotate = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));
            coords = rotate * coords;
            coords_geo = vec3(coords / size_geo.xy + vec2(0.5, 1.0), 1.0);
            vec3 coords_tex = niri_geo_to_tex * coords_geo;
            vec4 color = texture2D(niri_tex, coords_tex.st);

            return color;
            }

            vec4 close_color(vec3 coords_geo, vec3 size_geo) {
            return fall_and_rotate(coords_geo, size_geo);
            }
        "
    }

    

        screenshot-ui-open {
        duration-ms 400
        curve "ease-out-quad"
    }
}

window-rule {
    match app-id="kitty"
    match app-id="rio"

    open-floating true
    default-column-width { proportion 0.5; }
    default-window-height { fixed 500; }
}

window-rule {
    match app-id="org.pwmt.zathura"
    max-width 876
    focus-ring {
            off
        }
    border {
        // off
        active-color "#969696"
        inactive-color "#969696"
    }
}

window-rule {
    match app-id="org.gnome.Nautilus"
    default-column-width { proportion 0.50; }
    default-window-height { fixed 600; }
    open-floating true
}

window-rule {
    match is-window-cast-target=true
    shadow {
        color "#f9650520"
    }
}

window-rule {
    match app-id="mpv"
    default-floating-position x=32 y=32 relative-to="top-left"
    default-window-height { fixed 580; }
    open-floating true
    focus-ring {
        off
    }
}

window-rule {
    match app-id="imv"
    open-floating true
    default-floating-position x=32 y=32 relative-to="top-left"
    default-column-width { proportion 0.10; }
    focus-ring {
        off
    }
    border {
        off
    }
    shadow {
        off
    }
}

window-rule {
    geometry-corner-radius 3
    clip-to-geometry true
     draw-border-with-background false
}

window-rule {
    draw-border-with-background false
    opacity 0.95
}

window-rule {
    draw-border-with-background false
    match app-id="zen"

    open-maximized true
    
}

window-rule {
    match app-id="zen" title="^Picture-in-Picture$"
    open-floating true
    default-floating-position x=20 y=20 relative-to="bottom-right"
}

binds {
    Mod+Shift+Slash { show-hotkey-overlay; }
    
    // Suggested binds for running programs: terminal, app launcher, screen locker.
    Mod+T hotkey-overlay-title="Open a Terminal: kitty" { spawn "kitty"; }
    Mod+D hotkey-overlay-title="Run an Application: wofi" { spawn "wofi"; }
    Super+Alt+L hotkey-overlay-title="Lock the Screen: swaylock" { spawn "swaylock"; }
    
    Mod+Q { close-window; }

    // Special Keys
    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }

    // Open/close the Overview: a zoomed-out view of workspaces and windows.
    Mod+Tab repeat=false { toggle-overview; }
    
    // Window Movement and focus
    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }
    Mod+H     { focus-column-left; }
    Mod+J     { focus-window-down; }
    Mod+K     { focus-window-up; }
    Mod+L     { focus-column-right; }

    Mod+Ctrl+Left  { move-column-left; }
    Mod+Ctrl+Down  { move-window-down; }
    Mod+Ctrl+Up    { move-window-up; }
    Mod+Ctrl+Right { move-column-right; }
    Mod+Ctrl+H     { move-column-left; }
    Mod+Ctrl+J     { move-window-down; }
    Mod+Ctrl+K     { move-window-up; }
    Mod+Ctrl+L     { move-column-right; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    Mod+Shift+Left  { focus-monitor-left; }
    Mod+Shift+Down  { focus-monitor-down; }
    Mod+Shift+Up    { focus-monitor-up; }
    Mod+Shift+Right { focus-monitor-right; }
    Mod+Shift+H     { focus-monitor-left; }
    Mod+Shift+J     { focus-monitor-down; }
    Mod+Shift+K     { focus-monitor-up; }
    Mod+Shift+L     { focus-monitor-right; }

    Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    Mod+Page_Down      { focus-workspace-down; }
    Mod+Page_Up        { focus-workspace-up; }
    Mod+U              { focus-workspace-down; }
    Mod+I              { focus-workspace-up; }
    Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
    Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
    Mod+Ctrl+U         { move-column-to-workspace-down; }
    Mod+Ctrl+I         { move-column-to-workspace-up; }


    Mod+Shift+Page_Down { move-workspace-down; }
    Mod+Shift+Page_Up   { move-workspace-up; }
    Mod+Shift+U         { move-workspace-down; }
    Mod+Shift+I         { move-workspace-up; }

    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Ctrl+1 { move-column-to-workspace 1; }
    Mod+Ctrl+2 { move-column-to-workspace 2; }
    Mod+Ctrl+3 { move-column-to-workspace 3; }
    Mod+Ctrl+4 { move-column-to-workspace 4; }
    Mod+Ctrl+5 { move-column-to-workspace 5; }
    Mod+Ctrl+6 { move-column-to-workspace 6; }
    Mod+Ctrl+7 { move-column-to-workspace 7; }
    Mod+Ctrl+8 { move-column-to-workspace 8; }
    Mod+Ctrl+9 { move-column-to-workspace 9; }

    // The following binds move the focused window in and out of a column.
    // If the window is alone, they will consume it into the nearby column to the side.
    // If the window is already in a column, they will expel it out.
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    // Consume one window from the right to the bottom of the focused column.
    Mod+Comma  { consume-window-into-column; }
    // Expel the bottom window from the focused column to the right.
    Mod+Period { expel-window-from-column; }

    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }

    // Expand the focused column to space not taken up by other fully visible columns.
    // Makes the column "fill the rest of the space".
    Mod+Ctrl+F { expand-column-to-available-width; }
    Mod+C { center-column; }

    // Center all fully visible columns on screen.
    Mod+Ctrl+C { center-visible-columns; }

    // Finer width adjustments.
    // This command can also:
    // * set width in pixels: "1000"
    // * adjust width in pixels: "-5" or "+5"
    // * set width as a percentage of screen width: "25%"
    // * adjust width as a percentage of screen width: "-10%" or "+10%"
    // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
    // set-column-width "100" will make the column occupy 200 physical screen pixels.
    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    // Finer height adjustments when in column with other windows.
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    // Move the focused window between the floating and the tiling layout.
    Mod+V       { toggle-window-floating; }
    // Mod+Shift+V { switch-focus-between-floating-and-tiling; }

    // Toggle tabbed column display mode.
    // Windows in this column will appear as vertical tabs,
    // rather than stacked on top of each other.
    Mod+W { toggle-column-tabbed-display; }
    
    // Screenshots
    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    // Applications such as remote-desktop clients and software KVM switches may
    // request that niri stops processing the keyboard shortcuts defined here
    // so they may, for example, forward the key presses as-is to a remote machine.
    // It's a good idea to bind an escape hatch to toggle the inhibitor,
    // so a buggy application can't hold your session hostage.
    //
    // The allow-inhibiting=false property can be applied to other binds as well,
    // which ensures niri always processes them, even when an inhibitor is active.
    Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    Mod+Shift+E { quit; }
    Ctrl+Alt+Delete { quit; }

    // Powers off the monitors. To turn them back on, do any input like
    // moving the mouse or pressing any other key.
    Mod+Shift+P { power-off-monitors; }
}

environment {
  QT_QPA_PLATFORM "wayland"
  ELECTRON_OZONE_PLATFORM_HINT "auto"
  EDITOR "nvim"
  MOZ_ENABLE_WAYLAND "1" 
  DISPLAY ":1"
}

gestures {
    hot-corners {
        off
    }
}

layer-rule {
    // Find the right namespace by running niri msg layers.
    match namespace="^swww-daemon$"
    place-within-backdrop true
}
